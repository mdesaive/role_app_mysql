- name: Query hostname to master IP address
  set_fact:
    role_app_mysql_tmp_master_fqdn: '{{ lookup("community.general.dig", role_app_mysql_master_address + "/PTR", "@" + role_app_mysql_tmp_dns_server) | regex_replace("\.$", "") }}'

- name: Set short service name for master
  set_fact:
    role_app_mysql_tmp_master_short_hostname: '{{ role_app_mysql_tmp_master_fqdn.split(".")[0] }}'

- name: Fail, when there are differences between master_name and PTR of master_address
  fail:
    msg: 'Inconsistent naming: master_name = "{{ role_app_mysql_master_name }}" Reverse lookup of master_address = "{{ role_app_mysql_tmp_master_short_hostname }}"'
  when:
    - role_app_mysql_master_name != role_app_mysql_tmp_master_short_hostname

- name: debug
  debug:
    var: groups

- name: Create replication users
  mysql_user:
    # check_implicit_admin: '{{ "yes" if role_app_mysql_tmp_vault_root_auth_type == "socket" | default(false) else omit }}'
    login_unix_socket: '{{ "/var/run/mysqld/mysqld.sock" if role_app_mysql_tmp_vault_root_auth_type == "socket" | default(false) else omit }}'
    login_user: '{{ role_app_mysql_vault_default_auth_user if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
    login_password: '{{ role_app_mysql_vault_db_root_pw if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
    name: '{{ role_app_mysql_vault_slave_repl_user }}'
    host: '{{ role_app_mysql_service_address }}'
    password: '{{ role_app_mysql_vault_slave_repl_pw }}'
    priv: '*.*:REPLICATION SLAVE'
    state: present
  delegate_to: '{{ role_app_mysql_master_name }}'
  no_log: true
  when: 'role_app_mysql_master_name in groups[role_app_mysql_clustername]'

- name: Query master binlog position and logfile name on master.
  community.mysql.mysql_replication:
    login_unix_socket: '{{ "/var/run/mysqld/mysqld.sock" if hostvars[role_app_mysql_master_name]["role_app_mysql_tmp_vault_root_auth_type"] == "socket" | default(false) else omit }}'
    login_user: '{{ role_app_mysql_vault_default_auth_user if hostvars[role_app_mysql_master_name]["role_app_mysql_tmp_vault_root_auth_type"] == "password" | default(false) else omit }}'
    login_password: '{{ role_app_mysql_vault_db_root_pw if hostvars[role_app_mysql_master_name]["role_app_mysql_tmp_vault_root_auth_type"] == "password" | default(false) else omit }}'
    mode: getmaster
  delegate_to: '{{ role_app_mysql_master_name }}'
  register: role_mod_mysql_tmp_master_repl_position
  no_log: true
  when: 'role_app_mysql_master_name in groups[role_app_mysql_clustername]'

- name: Read master binlog position from variable
  set_fact:
    role_mod_mysql_tmp_master_repl_position: "{{ role_app_mysql_master_binlogposition }}"

- debug:
    var: role_mod_mysql_tmp_master_repl_position

- name: Fail, if master node not ready as master
  fail:
    msg: Master not ready
  when:
    - 'role_app_mysql_master_name in groups[role_app_mysql_clustername]'
    - role_mod_mysql_tmp_master_repl_position["Is_Master"] == False

- name: Get slave status
  community.mysql.mysql_replication:
    mode: getslave
    login_user: '{{ "root" if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
    login_password: '{{ role_app_mysql_vault_db_root_pw if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
    login_unix_socket: '{{ "/var/run/mysqld/mysqld.sock" if role_app_mysql_tmp_vault_root_auth_type == "socket" | default(false) else omit }}'
  register: role_mod_mysql_tmp_slave_status
  no_log: true

- block:
    - name: Change master on slaves
      community.mysql.mysql_replication:
        mode: changemaster
        master_host: '{{ role_app_mysql_master_address }}'
        master_log_file: '{{ role_mod_mysql_tmp_master_repl_position["File"] }}'
        master_log_pos: '{{ role_mod_mysql_tmp_master_repl_position["Position"] }}'
        master_user: '{{ role_app_mysql_vault_slave_repl_user }}'
        master_password: '{{ role_app_mysql_vault_slave_repl_pw }}'
        login_user: '{{ "root" if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
        login_password: '{{ role_app_mysql_vault_db_root_pw if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
        login_unix_socket: '{{ "/var/run/mysqld/mysqld.sock" if role_app_mysql_tmp_vault_root_auth_type == "socket" | default(false) else omit }}'
      no_log: true

    - name: Start slaves
      community.mysql.mysql_replication:
        mode: startslave
        login_user: '{{ "root" if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
        login_password: '{{ role_app_mysql_vault_db_root_pw if role_app_mysql_tmp_vault_root_auth_type == "password" | default(false) else omit }}'
        login_unix_socket: '{{ "/var/run/mysqld/mysqld.sock" if role_app_mysql_tmp_vault_root_auth_type == "socket" | default(false) else omit }}'
  when: role_mod_mysql_tmp_slave_status["Is_Slave"] == False
  no_log: true
