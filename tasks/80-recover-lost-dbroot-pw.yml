- name: Check if root pw was initally set.
  stat:
    path: /etc/ansible_locks/role_app_mysql_rootpw_set
  register: role_app_mysql_tmp_rootpw_set

- name: Define var for DB root PW to make thinks easier.
  set_fact:
    role_app_mysql_tmp_vault_dbroot_pw: '{{ role_app_mysql_vault_dataset[role_app_mysql_clustername]["hosts"][inventory_hostname]["db_root_pw"] }}'
  no_log: true

- name: Passwordreset
  block:
    - name: Prepare SQL file with root password
      template:
        src: templates/reset_sql_{{ role_app_mysql_dataset[role_app_mysql_clustername]["hosts"][inventory_hostname]["mysql_version"] }}.j2
        dest: /var/lib/mysql/reset.sql
        owner: mysql
        group: mysql
        mode: '400'

    - name: Stop MySQL Service.
      service:
        name: "{{ role_app_mysql_service }}"
        state: stopped

    - name: Stop mysqld process
      shell: sleep 5; killall mysqld || /bin/true
      ignore_errors: true

    - name: Reset password
      shell: sleep 5; mysqld --user mysql --general-log=1 --general-log-file=/var/log/mysql/mysql.log --init-file=/var/lib/mysql/reset.sql &

    - name: Stop mysqld process
      shell: sleep 10; killall mysqld || /bin/true
      ignore_errors: true

    - name: Assure Ansible locks directory exists
      file:
        name: /etc/ansible_locks
        state: directory

    - name: Set Lockfile
      file:
        path: /etc/ansible_locks/role_app_mysql_rootpw_set
        state: touch
  always:
    - name: Delete passwordfile.
      file:
        dest: /var/lib/mysql/reset.sql
        state: absent
  when: role_app_mysql_tmp_rootpw_set.stat.exists == false

